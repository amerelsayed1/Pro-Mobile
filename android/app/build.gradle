def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def outputPathName = "..\\output-builds\\"

android {
    compileSdkVersion 34
    namespace "com.iamer.pro"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.iamer.pro"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                renameAPK(variant, defaultConfig, 'R')
            }
        }

        /*debug {
            signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                renameAPK(variant, defaultConfig, 'T')
            }
        }*/


        debug {
            signingConfig signingConfigs.debug
            android.applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def buildType = variant.buildType.name
                    println("buildType=" + buildType)

                    def projectRootDir = "$rootDir"
                    def outputFileDir = new File(projectRootDir + File.separator, "apk")
                    println("outputFileDir=" + outputFileDir)
                    println("outputFileDir=" + projectRootDir)

                    renameAPK(variant, defaultConfig, 'R')

                    /*if (buildType != "debug") {


                        def apkFlavorsNameDir = new File(outputFileDir, newApkFlavorsName)
                        println("apkFlavorsNameDir=" + apkFlavorsNameDir)
                        // variant.getPackageApplicationProvider().get().outputDirectory = apkFlavorsNameDir
                        def appName
                        if (productFlavorsName.contains("dev")) {
                            appName = "cruise-dev"
                        } else if (productFlavorsName.contains("test")) {
                            appName = "cruise-beta"
                        } else if (productFlavorsName.contains("prod")) {
                            appName = "cruise-release"
                        }else{
                            appName = "cruise-beta"
                        }
                        def releaseApkName = "" + appName + "-" + defaultConfig.versionName + ".apk"
                        output.outputFileName = releaseApkName
                    }*/
                }
            }
        }
    }

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation "androidx.core:core:1.12.0"
    implementation "androidx.core:core-ktx:1.12.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.core:core-animation:1.0.0-rc01"
    implementation "androidx.interpolator:interpolator:1.0.0"
    def appcompat_version = "1.3.1"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    // For loading and tinting drawables on older versions of the platform
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
}

def renameAPK(variant, defaultConfig, buildType) {
    variant.outputs.all { output ->

        def formattedDate = new Date().format('yyMMdd')
        //def file = output.packageApplication.outputFile
        def fileName = "Test" + "_V" + defaultConfig.versionCode + "_" + formattedDate + "_" + buildType + ".apk"
        project.logger.info(formattedDate)
        output.outputFileName = fileName
    }
}