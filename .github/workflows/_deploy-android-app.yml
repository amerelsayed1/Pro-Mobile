name: Deploy To App Distribution

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ master ]

jobs:
  build_deploy_android:
    name: Build Flutter (Android)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'


      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'

      - name: Debug Service Account JSON
        run: echo "${{ secrets.YOUR_SERVICE_ACCOUNT_CREDENTIALS }}"

      - name: Install Dependencies
        run: flutter pub get

      - name : Build Release
        run : flutter build apk

      - name: Upload Android to TestApp.io
        uses: testappio/github-action@v5
        with:
          api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
          app_id: ${{secrets.TESTAPPIO_APP_ID}}
          file: build/app/outputs/flutter-apk/app-release.apk
          release_notes: "Testing manual release notes..."
          git_release_notes: true
          include_git_commit_id: false
          notify: true

      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{secrets.GOOGLE_SERVICES_JSON}}
          groups: testers
          file: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    name: Build Flutter (iOS)
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      - name: Log in to Firebase
        run: |
          echo "${{secrets.FIREBASE_TOKEN}}" | firebase login --interactive --no-localhost

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'

      - run: flutter clean
      - name: Install Dependencies
        run: flutter pub get

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}


      - name: Install the provisioning profile
        env:
          PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

          echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output $PP_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: yukiarrr/ios-build-action@v1.11.2
        with:
          project-path: Experts-Mobile/ios/Runner.xcodeproj
          p12-base64: ${{ secrets.P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
          mobileprovision-base64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          team-id: ${{ secrets.TEAM_ID }}


      - name: Upload to Firebase Distribution
        run: |
          firebase appdistribution:distribute "build/ios/iphoneos/FlutterIpaExport.ipa" --token "${{secrets.FIREBASE_TOKEN}}" --app "${{secrets.FIREBASE_APP_ID_IOS}}" --groups 'testers'